// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: cosmos/staking/v1beta1/lsm_tx.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// MsgRedeemTokensForShares redeems a tokenized share back into a native
// delegation
type MsgRedeemTokensForShares struct {
	DelegatorAddress string     `protobuf:"bytes,1,opt,name=delegator_address,json=delegatorAddress,proto3" json:"delegator_address,omitempty" yaml:"delegator_address"`
	Amount           types.Coin `protobuf:"bytes,2,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgRedeemTokensForShares) Reset()         { *m = MsgRedeemTokensForShares{} }
func (m *MsgRedeemTokensForShares) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemTokensForShares) ProtoMessage()    {}
func (*MsgRedeemTokensForShares) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c3b474a863e424, []int{0}
}
func (m *MsgRedeemTokensForShares) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemTokensForShares) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemTokensForShares.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemTokensForShares) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemTokensForShares.Merge(m, src)
}
func (m *MsgRedeemTokensForShares) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemTokensForShares) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemTokensForShares.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemTokensForShares proto.InternalMessageInfo

// MsgRedeemTokensForSharesResponse defines the Msg/MsgRedeemTokensForShares
// response type.
type MsgRedeemTokensForSharesResponse struct {
	Amount types.Coin `protobuf:"bytes,1,opt,name=amount,proto3" json:"amount"`
}

func (m *MsgRedeemTokensForSharesResponse) Reset()         { *m = MsgRedeemTokensForSharesResponse{} }
func (m *MsgRedeemTokensForSharesResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRedeemTokensForSharesResponse) ProtoMessage()    {}
func (*MsgRedeemTokensForSharesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_34c3b474a863e424, []int{1}
}
func (m *MsgRedeemTokensForSharesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRedeemTokensForSharesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRedeemTokensForSharesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRedeemTokensForSharesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRedeemTokensForSharesResponse.Merge(m, src)
}
func (m *MsgRedeemTokensForSharesResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRedeemTokensForSharesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRedeemTokensForSharesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRedeemTokensForSharesResponse proto.InternalMessageInfo

func (m *MsgRedeemTokensForSharesResponse) GetAmount() types.Coin {
	if m != nil {
		return m.Amount
	}
	return types.Coin{}
}

func init() {
	proto.RegisterType((*MsgRedeemTokensForShares)(nil), "cosmos.staking.v1beta1.MsgRedeemTokensForShares")
	proto.RegisterType((*MsgRedeemTokensForSharesResponse)(nil), "cosmos.staking.v1beta1.MsgRedeemTokensForSharesResponse")
}

func init() {
	proto.RegisterFile("cosmos/staking/v1beta1/lsm_tx.proto", fileDescriptor_34c3b474a863e424)
}

var fileDescriptor_34c3b474a863e424 = []byte{
	// 327 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x91, 0xb1, 0x4a, 0xc3, 0x50,
	0x14, 0x86, 0x73, 0x45, 0x8a, 0xc6, 0x45, 0x8b, 0x48, 0x2c, 0x72, 0x53, 0xe2, 0xd2, 0xc5, 0x5c,
	0x5a, 0x07, 0xa1, 0x9b, 0x15, 0x04, 0xa1, 0x2e, 0xa9, 0x93, 0x0e, 0xe5, 0x26, 0x39, 0xa4, 0xa1,
	0x4d, 0x4e, 0xb9, 0xe7, 0xb6, 0xb4, 0x6f, 0xe0, 0xe8, 0x23, 0x74, 0xf4, 0x51, 0x3a, 0x76, 0x74,
	0x2a, 0xd2, 0x2e, 0xce, 0x3e, 0x81, 0xa4, 0x89, 0x45, 0x10, 0x07, 0xb7, 0xc3, 0xb9, 0x1f, 0xe7,
	0xff, 0xff, 0xfb, 0x9b, 0xe7, 0x01, 0x52, 0x82, 0x24, 0x48, 0xcb, 0x7e, 0x9c, 0x46, 0x62, 0x5c,
	0xf7, 0x41, 0xcb, 0xba, 0x18, 0x50, 0xd2, 0xd5, 0x13, 0x77, 0xa8, 0x50, 0x63, 0xf9, 0x24, 0x87,
	0xdc, 0x02, 0x72, 0x0b, 0xa8, 0x72, 0x1c, 0x61, 0x84, 0x1b, 0x44, 0x64, 0x53, 0x4e, 0x57, 0x78,
	0x71, 0xd2, 0x97, 0x04, 0xdb, 0x7b, 0x01, 0xc6, 0x69, 0xfe, 0xee, 0xbc, 0x32, 0xd3, 0xba, 0xa7,
	0xc8, 0x83, 0x10, 0x20, 0x79, 0xc0, 0x3e, 0xa4, 0x74, 0x8b, 0xaa, 0xd3, 0x93, 0x0a, 0xa8, 0x7c,
	0x67, 0x1e, 0x85, 0x30, 0x80, 0x48, 0x6a, 0x54, 0x5d, 0x19, 0x86, 0x0a, 0x88, 0x2c, 0x56, 0x65,
	0xb5, 0xfd, 0xd6, 0xd9, 0xe7, 0xd2, 0xb6, 0xa6, 0x32, 0x19, 0x34, 0x9d, 0x5f, 0x88, 0xe3, 0x1d,
	0x6e, 0x77, 0xd7, 0xf9, 0xaa, 0x7c, 0x65, 0x96, 0x64, 0x82, 0xa3, 0x54, 0x5b, 0x3b, 0x55, 0x56,
	0x3b, 0x68, 0x9c, 0xba, 0x45, 0x8c, 0xcc, 0xd8, 0x77, 0x06, 0xf7, 0x06, 0xe3, 0xb4, 0xb5, 0x3b,
	0x5f, 0xda, 0x86, 0x57, 0xe0, 0xcd, 0xbd, 0xe7, 0x99, 0x6d, 0x7c, 0xcc, 0x6c, 0xc3, 0x79, 0x32,
	0xab, 0x7f, 0x39, 0xf5, 0x80, 0x86, 0x98, 0x12, 0xfc, 0x90, 0x61, 0xff, 0x92, 0x69, 0xb5, 0xe7,
	0x2b, 0xce, 0x16, 0x2b, 0xce, 0xde, 0x57, 0x9c, 0xbd, 0xac, 0xb9, 0xb1, 0x58, 0x73, 0xe3, 0x6d,
	0xcd, 0x8d, 0xc7, 0x46, 0x14, 0xeb, 0xde, 0xc8, 0x77, 0x03, 0x4c, 0x44, 0x47, 0xab, 0x38, 0x84,
	0x8b, 0xb6, 0xf4, 0xb3, 0x92, 0xb2, 0x59, 0x8c, 0xeb, 0x0d, 0x31, 0xd9, 0x34, 0x06, 0xb1, 0x1f,
	0x08, 0x3d, 0x1d, 0x02, 0xf9, 0xa5, 0xcd, 0xe7, 0x5e, 0x7e, 0x05, 0x00, 0x00, 0xff, 0xff, 0x97,
	0xca, 0xba, 0x54, 0xd1, 0x01, 0x00, 0x00,
}

func (m *MsgRedeemTokensForShares) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemTokensForShares) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemTokensForShares) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLsmTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x12
	if len(m.DelegatorAddress) > 0 {
		i -= len(m.DelegatorAddress)
		copy(dAtA[i:], m.DelegatorAddress)
		i = encodeVarintLsmTx(dAtA, i, uint64(len(m.DelegatorAddress)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRedeemTokensForSharesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRedeemTokensForSharesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRedeemTokensForSharesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	{
		size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = encodeVarintLsmTx(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0xa
	return len(dAtA) - i, nil
}

func encodeVarintLsmTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovLsmTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *MsgRedeemTokensForShares) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.DelegatorAddress)
	if l > 0 {
		n += 1 + l + sovLsmTx(uint64(l))
	}
	l = m.Amount.Size()
	n += 1 + l + sovLsmTx(uint64(l))
	return n
}

func (m *MsgRedeemTokensForSharesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = m.Amount.Size()
	n += 1 + l + sovLsmTx(uint64(l))
	return n
}

func sovLsmTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozLsmTx(x uint64) (n int) {
	return sovLsmTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *MsgRedeemTokensForShares) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsmTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemTokensForShares: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemTokensForShares: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DelegatorAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsmTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthLsmTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthLsmTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DelegatorAddress = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsmTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLsmTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLsmTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLsmTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLsmTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRedeemTokensForSharesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowLsmTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRedeemTokensForSharesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRedeemTokensForSharesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowLsmTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthLsmTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthLsmTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipLsmTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthLsmTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipLsmTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowLsmTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLsmTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowLsmTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthLsmTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupLsmTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthLsmTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthLsmTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowLsmTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupLsmTx = fmt.Errorf("proto: unexpected end of group")
)
