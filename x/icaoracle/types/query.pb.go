// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/icaoracle/query.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/gogoproto/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Query's a specific oracle
type QueryOracleRequest struct {
	ChainId string `protobuf:"bytes,1,opt,name=chain_id,json=chainId,proto3" json:"chain_id,omitempty"`
}

func (m *QueryOracleRequest) Reset()         { *m = QueryOracleRequest{} }
func (m *QueryOracleRequest) String() string { return proto.CompactTextString(m) }
func (*QueryOracleRequest) ProtoMessage()    {}
func (*QueryOracleRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d4563f64cd9510, []int{0}
}
func (m *QueryOracleRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleRequest.Merge(m, src)
}
func (m *QueryOracleRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleRequest proto.InternalMessageInfo

func (m *QueryOracleRequest) GetChainId() string {
	if m != nil {
		return m.ChainId
	}
	return ""
}

type QueryOracleResponse struct {
	Oracle *Oracle `protobuf:"bytes,1,opt,name=oracle,proto3" json:"oracle,omitempty"`
}

func (m *QueryOracleResponse) Reset()         { *m = QueryOracleResponse{} }
func (m *QueryOracleResponse) String() string { return proto.CompactTextString(m) }
func (*QueryOracleResponse) ProtoMessage()    {}
func (*QueryOracleResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d4563f64cd9510, []int{1}
}
func (m *QueryOracleResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryOracleResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryOracleResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryOracleResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryOracleResponse.Merge(m, src)
}
func (m *QueryOracleResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryOracleResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryOracleResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryOracleResponse proto.InternalMessageInfo

func (m *QueryOracleResponse) GetOracle() *Oracle {
	if m != nil {
		return m.Oracle
	}
	return nil
}

// Query's all oracle's
type QueryAllOraclesRequest struct {
}

func (m *QueryAllOraclesRequest) Reset()         { *m = QueryAllOraclesRequest{} }
func (m *QueryAllOraclesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllOraclesRequest) ProtoMessage()    {}
func (*QueryAllOraclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d4563f64cd9510, []int{2}
}
func (m *QueryAllOraclesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOraclesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOraclesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOraclesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOraclesRequest.Merge(m, src)
}
func (m *QueryAllOraclesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOraclesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOraclesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOraclesRequest proto.InternalMessageInfo

type QueryAllOraclesResponse struct {
	Oracles []Oracle `protobuf:"bytes,1,rep,name=oracles,proto3" json:"oracles"`
}

func (m *QueryAllOraclesResponse) Reset()         { *m = QueryAllOraclesResponse{} }
func (m *QueryAllOraclesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllOraclesResponse) ProtoMessage()    {}
func (*QueryAllOraclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d4563f64cd9510, []int{3}
}
func (m *QueryAllOraclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllOraclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllOraclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllOraclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllOraclesResponse.Merge(m, src)
}
func (m *QueryAllOraclesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllOraclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllOraclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllOraclesResponse proto.InternalMessageInfo

func (m *QueryAllOraclesResponse) GetOracles() []Oracle {
	if m != nil {
		return m.Oracles
	}
	return nil
}

// Query's all oracle with a filter for whether they're active
type QueryActiveOraclesRequest struct {
	Active bool `protobuf:"varint,1,opt,name=active,proto3" json:"active,omitempty"`
}

func (m *QueryActiveOraclesRequest) Reset()         { *m = QueryActiveOraclesRequest{} }
func (m *QueryActiveOraclesRequest) String() string { return proto.CompactTextString(m) }
func (*QueryActiveOraclesRequest) ProtoMessage()    {}
func (*QueryActiveOraclesRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d4563f64cd9510, []int{4}
}
func (m *QueryActiveOraclesRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveOraclesRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveOraclesRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveOraclesRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveOraclesRequest.Merge(m, src)
}
func (m *QueryActiveOraclesRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveOraclesRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveOraclesRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveOraclesRequest proto.InternalMessageInfo

func (m *QueryActiveOraclesRequest) GetActive() bool {
	if m != nil {
		return m.Active
	}
	return false
}

type QueryActiveOraclesResponse struct {
	Oracles []Oracle `protobuf:"bytes,1,rep,name=oracles,proto3" json:"oracles"`
}

func (m *QueryActiveOraclesResponse) Reset()         { *m = QueryActiveOraclesResponse{} }
func (m *QueryActiveOraclesResponse) String() string { return proto.CompactTextString(m) }
func (*QueryActiveOraclesResponse) ProtoMessage()    {}
func (*QueryActiveOraclesResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d4563f64cd9510, []int{5}
}
func (m *QueryActiveOraclesResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryActiveOraclesResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryActiveOraclesResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryActiveOraclesResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryActiveOraclesResponse.Merge(m, src)
}
func (m *QueryActiveOraclesResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryActiveOraclesResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryActiveOraclesResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryActiveOraclesResponse proto.InternalMessageInfo

func (m *QueryActiveOraclesResponse) GetOracles() []Oracle {
	if m != nil {
		return m.Oracles
	}
	return nil
}

// Query's all metric update's currently in flight
type QueryAllPendingMetricsRequest struct {
}

func (m *QueryAllPendingMetricsRequest) Reset()         { *m = QueryAllPendingMetricsRequest{} }
func (m *QueryAllPendingMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingMetricsRequest) ProtoMessage()    {}
func (*QueryAllPendingMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d4563f64cd9510, []int{6}
}
func (m *QueryAllPendingMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingMetricsRequest.Merge(m, src)
}
func (m *QueryAllPendingMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingMetricsRequest proto.InternalMessageInfo

type QueryAllPendingMetricsResponse struct {
	Metrics []Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics"`
}

func (m *QueryAllPendingMetricsResponse) Reset()         { *m = QueryAllPendingMetricsResponse{} }
func (m *QueryAllPendingMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryAllPendingMetricsResponse) ProtoMessage()    {}
func (*QueryAllPendingMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d4563f64cd9510, []int{7}
}
func (m *QueryAllPendingMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryAllPendingMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryAllPendingMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryAllPendingMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryAllPendingMetricsResponse.Merge(m, src)
}
func (m *QueryAllPendingMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryAllPendingMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryAllPendingMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryAllPendingMetricsResponse proto.InternalMessageInfo

func (m *QueryAllPendingMetricsResponse) GetMetrics() []Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

// Query's all metric update's currently in flight with optional filters
type QueryPendingMetricsRequest struct {
	MetricKey     string `protobuf:"bytes,1,opt,name=metric_key,json=metricKey,proto3" json:"metric_key,omitempty"`
	OracleChainId string `protobuf:"bytes,2,opt,name=oracle_chain_id,json=oracleChainId,proto3" json:"oracle_chain_id,omitempty"`
}

func (m *QueryPendingMetricsRequest) Reset()         { *m = QueryPendingMetricsRequest{} }
func (m *QueryPendingMetricsRequest) String() string { return proto.CompactTextString(m) }
func (*QueryPendingMetricsRequest) ProtoMessage()    {}
func (*QueryPendingMetricsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d4563f64cd9510, []int{8}
}
func (m *QueryPendingMetricsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingMetricsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingMetricsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingMetricsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingMetricsRequest.Merge(m, src)
}
func (m *QueryPendingMetricsRequest) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingMetricsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingMetricsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingMetricsRequest proto.InternalMessageInfo

func (m *QueryPendingMetricsRequest) GetMetricKey() string {
	if m != nil {
		return m.MetricKey
	}
	return ""
}

func (m *QueryPendingMetricsRequest) GetOracleChainId() string {
	if m != nil {
		return m.OracleChainId
	}
	return ""
}

type QueryPendingMetricsResponse struct {
	Metrics []Metric `protobuf:"bytes,1,rep,name=metrics,proto3" json:"metrics"`
}

func (m *QueryPendingMetricsResponse) Reset()         { *m = QueryPendingMetricsResponse{} }
func (m *QueryPendingMetricsResponse) String() string { return proto.CompactTextString(m) }
func (*QueryPendingMetricsResponse) ProtoMessage()    {}
func (*QueryPendingMetricsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_d4d4563f64cd9510, []int{9}
}
func (m *QueryPendingMetricsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *QueryPendingMetricsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_QueryPendingMetricsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *QueryPendingMetricsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_QueryPendingMetricsResponse.Merge(m, src)
}
func (m *QueryPendingMetricsResponse) XXX_Size() int {
	return m.Size()
}
func (m *QueryPendingMetricsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_QueryPendingMetricsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_QueryPendingMetricsResponse proto.InternalMessageInfo

func (m *QueryPendingMetricsResponse) GetMetrics() []Metric {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func init() {
	proto.RegisterType((*QueryOracleRequest)(nil), "stride.icaoracle.QueryOracleRequest")
	proto.RegisterType((*QueryOracleResponse)(nil), "stride.icaoracle.QueryOracleResponse")
	proto.RegisterType((*QueryAllOraclesRequest)(nil), "stride.icaoracle.QueryAllOraclesRequest")
	proto.RegisterType((*QueryAllOraclesResponse)(nil), "stride.icaoracle.QueryAllOraclesResponse")
	proto.RegisterType((*QueryActiveOraclesRequest)(nil), "stride.icaoracle.QueryActiveOraclesRequest")
	proto.RegisterType((*QueryActiveOraclesResponse)(nil), "stride.icaoracle.QueryActiveOraclesResponse")
	proto.RegisterType((*QueryAllPendingMetricsRequest)(nil), "stride.icaoracle.QueryAllPendingMetricsRequest")
	proto.RegisterType((*QueryAllPendingMetricsResponse)(nil), "stride.icaoracle.QueryAllPendingMetricsResponse")
	proto.RegisterType((*QueryPendingMetricsRequest)(nil), "stride.icaoracle.QueryPendingMetricsRequest")
	proto.RegisterType((*QueryPendingMetricsResponse)(nil), "stride.icaoracle.QueryPendingMetricsResponse")
}

func init() { proto.RegisterFile("stride/icaoracle/query.proto", fileDescriptor_d4d4563f64cd9510) }

var fileDescriptor_d4d4563f64cd9510 = []byte{
	// 584 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x55, 0xcf, 0x4f, 0x13, 0x41,
	0x14, 0xee, 0xa0, 0x16, 0x78, 0x06, 0x7f, 0x3c, 0x0d, 0x96, 0x15, 0x96, 0x66, 0x23, 0x8a, 0xd1,
	0x76, 0xb0, 0x84, 0xe8, 0x15, 0x38, 0x18, 0x22, 0x46, 0x2d, 0x89, 0x26, 0x5c, 0x36, 0xdb, 0xed,
	0x64, 0x99, 0x58, 0x76, 0xca, 0xce, 0x96, 0xd8, 0x18, 0x2f, 0xfe, 0x01, 0x86, 0xc4, 0x3f, 0xc1,
	0xb3, 0x77, 0x0f, 0xfe, 0x01, 0x1c, 0x49, 0xbc, 0x78, 0x32, 0xa6, 0xf5, 0x0f, 0x31, 0x9d, 0x99,
	0x16, 0xcb, 0xee, 0x62, 0x95, 0x13, 0xb3, 0xef, 0x7d, 0xdf, 0xfb, 0xbe, 0x79, 0x7c, 0x93, 0xc2,
	0xac, 0x8c, 0x23, 0x5e, 0x67, 0x94, 0xfb, 0x9e, 0x88, 0x3c, 0xbf, 0xc1, 0xe8, 0x5e, 0x8b, 0x45,
	0xed, 0x72, 0x33, 0x12, 0xb1, 0xc0, 0x2b, 0xba, 0x5b, 0x1e, 0x74, 0xad, 0x62, 0x02, 0x3f, 0x38,
	0x69, 0x8e, 0x35, 0x1b, 0x08, 0x11, 0x34, 0x18, 0xf5, 0x9a, 0x9c, 0x7a, 0x61, 0x28, 0x62, 0x2f,
	0xe6, 0x22, 0x94, 0xa6, 0x7b, 0x3d, 0x10, 0x81, 0x50, 0x47, 0xda, 0x3b, 0xe9, 0xaa, 0x43, 0x01,
	0x5f, 0xf4, 0x64, 0x9f, 0xa9, 0x41, 0x55, 0xb6, 0xd7, 0x62, 0x32, 0xc6, 0x19, 0x98, 0xf0, 0x77,
	0x3c, 0x1e, 0xba, 0xbc, 0x5e, 0x20, 0x45, 0xb2, 0x38, 0x59, 0x1d, 0x57, 0xdf, 0x1b, 0x75, 0xe7,
	0x31, 0x5c, 0x1b, 0x22, 0xc8, 0xa6, 0x08, 0x25, 0xc3, 0x25, 0xc8, 0x6b, 0x2f, 0x0a, 0x7f, 0xb1,
	0x52, 0x28, 0x9f, 0xbc, 0x40, 0xd9, 0x30, 0x0c, 0xce, 0x29, 0xc0, 0xb4, 0x1a, 0xb4, 0xda, 0x68,
	0xe8, 0x8e, 0x34, 0xea, 0xce, 0x16, 0xdc, 0x48, 0x74, 0x8c, 0xcc, 0x23, 0x18, 0xd7, 0x74, 0x59,
	0x20, 0xc5, 0x73, 0xa7, 0xe9, 0xac, 0x9d, 0x3f, 0xfc, 0x31, 0x9f, 0xab, 0xf6, 0xe1, 0xce, 0x32,
	0xcc, 0xe8, 0xa1, 0x7e, 0xcc, 0xf7, 0xd9, 0xb0, 0x22, 0x4e, 0x43, 0xde, 0x53, 0x75, 0xe5, 0x7e,
	0xa2, 0x6a, 0xbe, 0x9c, 0x97, 0x60, 0xa5, 0x91, 0xce, 0x6c, 0x66, 0x1e, 0xe6, 0xfa, 0x37, 0x7c,
	0xce, 0xc2, 0x3a, 0x0f, 0x83, 0xa7, 0x2c, 0x8e, 0xb8, 0x3f, 0x58, 0xc1, 0x36, 0xd8, 0x59, 0x80,
	0x63, 0xf1, 0x5d, 0x5d, 0xca, 0x16, 0xd7, 0x9c, 0xbe, 0xb8, 0x81, 0x3b, 0xbe, 0xb9, 0x54, 0xaa,
	0x32, 0xce, 0x01, 0x68, 0xa0, 0xfb, 0x9a, 0xb5, 0xcd, 0x3f, 0x7f, 0x52, 0x57, 0x9e, 0xb0, 0x36,
	0xde, 0x86, 0xcb, 0x7a, 0xb8, 0x3b, 0x08, 0xc8, 0x98, 0xc2, 0x4c, 0xe9, 0xf2, 0xba, 0x89, 0xc9,
	0x2b, 0xb8, 0x99, 0x2a, 0x72, 0x56, 0xf7, 0x95, 0xaf, 0x79, 0xb8, 0xa0, 0x26, 0xe3, 0x07, 0x02,
	0x79, 0xbd, 0x5e, 0xbc, 0x95, 0x64, 0x27, 0x53, 0x6d, 0x2d, 0xfc, 0x05, 0xa5, 0xbd, 0x39, 0x0f,
	0xdf, 0x7f, 0xfb, 0xf5, 0x71, 0xec, 0x01, 0x52, 0xba, 0xa5, 0xe0, 0xa5, 0x4d, 0xaf, 0x26, 0x69,
	0xe2, 0xf5, 0x99, 0x3f, 0x6f, 0xfb, 0x7b, 0x78, 0x87, 0x07, 0x04, 0xe0, 0x38, 0xb3, 0xb8, 0x98,
	0x21, 0x97, 0x08, 0xbc, 0x75, 0x77, 0x04, 0xa4, 0x31, 0x57, 0x52, 0xe6, 0xee, 0xe0, 0xc2, 0x28,
	0xe6, 0x24, 0x7e, 0x22, 0x30, 0x35, 0x14, 0x5e, 0xbc, 0x97, 0xa5, 0x95, 0xf2, 0x2e, 0xac, 0xfb,
	0xa3, 0x81, 0xff, 0x67, 0x71, 0x92, 0xd6, 0xda, 0xae, 0x7e, 0x66, 0xf8, 0x99, 0xc0, 0xd5, 0x44,
	0xd2, 0x91, 0x66, 0x6f, 0x25, 0x35, 0xba, 0xd6, 0xd2, 0xe8, 0x04, 0xe3, 0x78, 0x45, 0x39, 0xa6,
	0x58, 0x3a, 0xdd, 0x71, 0x53, 0xb3, 0x5d, 0x93, 0x41, 0xfc, 0x42, 0xe0, 0xd2, 0x09, 0xb3, 0x59,
	0x9b, 0x4a, 0x77, 0x5a, 0x1a, 0x11, 0x6d, 0x6c, 0x6e, 0x28, 0x9b, 0xeb, 0xb8, 0xfa, 0x4f, 0x36,
	0x7b, 0x0b, 0x36, 0x4f, 0x59, 0x44, 0xae, 0xc6, 0xac, 0x6d, 0x1e, 0x76, 0x6c, 0x72, 0xd4, 0xb1,
	0xc9, 0xcf, 0x8e, 0x4d, 0x0e, 0xba, 0x76, 0xee, 0xa8, 0x6b, 0xe7, 0xbe, 0x77, 0xed, 0xdc, 0x76,
	0x25, 0xe0, 0xf1, 0x4e, 0xab, 0x56, 0xf6, 0xc5, 0x6e, 0x9a, 0xcc, 0xfe, 0x0a, 0x7d, 0xf3, 0x87,
	0x56, 0xdc, 0x6e, 0x32, 0x59, 0xcb, 0xab, 0x1f, 0x91, 0xe5, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff,
	0xb3, 0xd0, 0xe7, 0xba, 0xcc, 0x06, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// QueryClient is the client API for Query service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type QueryClient interface {
	// Query a specific oracle
	Oracle(ctx context.Context, in *QueryOracleRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error)
	// Query all oracles
	AllOracles(ctx context.Context, in *QueryAllOraclesRequest, opts ...grpc.CallOption) (*QueryAllOraclesResponse, error)
	// Query oracles with active ffilter:
	// - /oracles/by_active?active=true
	// - /oracles/by_active?active=false
	ActiveOracles(ctx context.Context, in *QueryActiveOraclesRequest, opts ...grpc.CallOption) (*QueryActiveOraclesResponse, error)
	// Query all pending metrics
	AllPendingMetrics(ctx context.Context, in *QueryAllPendingMetricsRequest, opts ...grpc.CallOption) (*QueryAllPendingMetricsResponse, error)
	// Query pending metrics with optional filters:
	// - /pending_metrics/by_metric_or_oracle?metric_key=X
	// - /pending_metrics/by_metric_or_oracle?oracle_chain_id=Y
	// -
	// /pending_metrics/by_metric_or_oracle?metric_key=X&oracle_chain_id=Y
	PendingMetrics(ctx context.Context, in *QueryPendingMetricsRequest, opts ...grpc.CallOption) (*QueryPendingMetricsResponse, error)
}

type queryClient struct {
	cc grpc1.ClientConn
}

func NewQueryClient(cc grpc1.ClientConn) QueryClient {
	return &queryClient{cc}
}

func (c *queryClient) Oracle(ctx context.Context, in *QueryOracleRequest, opts ...grpc.CallOption) (*QueryOracleResponse, error) {
	out := new(QueryOracleResponse)
	err := c.cc.Invoke(ctx, "/stride.icaoracle.Query/Oracle", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllOracles(ctx context.Context, in *QueryAllOraclesRequest, opts ...grpc.CallOption) (*QueryAllOraclesResponse, error) {
	out := new(QueryAllOraclesResponse)
	err := c.cc.Invoke(ctx, "/stride.icaoracle.Query/AllOracles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) ActiveOracles(ctx context.Context, in *QueryActiveOraclesRequest, opts ...grpc.CallOption) (*QueryActiveOraclesResponse, error) {
	out := new(QueryActiveOraclesResponse)
	err := c.cc.Invoke(ctx, "/stride.icaoracle.Query/ActiveOracles", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) AllPendingMetrics(ctx context.Context, in *QueryAllPendingMetricsRequest, opts ...grpc.CallOption) (*QueryAllPendingMetricsResponse, error) {
	out := new(QueryAllPendingMetricsResponse)
	err := c.cc.Invoke(ctx, "/stride.icaoracle.Query/AllPendingMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryClient) PendingMetrics(ctx context.Context, in *QueryPendingMetricsRequest, opts ...grpc.CallOption) (*QueryPendingMetricsResponse, error) {
	out := new(QueryPendingMetricsResponse)
	err := c.cc.Invoke(ctx, "/stride.icaoracle.Query/PendingMetrics", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QueryServer is the server API for Query service.
type QueryServer interface {
	// Query a specific oracle
	Oracle(context.Context, *QueryOracleRequest) (*QueryOracleResponse, error)
	// Query all oracles
	AllOracles(context.Context, *QueryAllOraclesRequest) (*QueryAllOraclesResponse, error)
	// Query oracles with active ffilter:
	// - /oracles/by_active?active=true
	// - /oracles/by_active?active=false
	ActiveOracles(context.Context, *QueryActiveOraclesRequest) (*QueryActiveOraclesResponse, error)
	// Query all pending metrics
	AllPendingMetrics(context.Context, *QueryAllPendingMetricsRequest) (*QueryAllPendingMetricsResponse, error)
	// Query pending metrics with optional filters:
	// - /pending_metrics/by_metric_or_oracle?metric_key=X
	// - /pending_metrics/by_metric_or_oracle?oracle_chain_id=Y
	// -
	// /pending_metrics/by_metric_or_oracle?metric_key=X&oracle_chain_id=Y
	PendingMetrics(context.Context, *QueryPendingMetricsRequest) (*QueryPendingMetricsResponse, error)
}

// UnimplementedQueryServer can be embedded to have forward compatible implementations.
type UnimplementedQueryServer struct {
}

func (*UnimplementedQueryServer) Oracle(ctx context.Context, req *QueryOracleRequest) (*QueryOracleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Oracle not implemented")
}
func (*UnimplementedQueryServer) AllOracles(ctx context.Context, req *QueryAllOraclesRequest) (*QueryAllOraclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllOracles not implemented")
}
func (*UnimplementedQueryServer) ActiveOracles(ctx context.Context, req *QueryActiveOraclesRequest) (*QueryActiveOraclesResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActiveOracles not implemented")
}
func (*UnimplementedQueryServer) AllPendingMetrics(ctx context.Context, req *QueryAllPendingMetricsRequest) (*QueryAllPendingMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AllPendingMetrics not implemented")
}
func (*UnimplementedQueryServer) PendingMetrics(ctx context.Context, req *QueryPendingMetricsRequest) (*QueryPendingMetricsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PendingMetrics not implemented")
}

func RegisterQueryServer(s grpc1.Server, srv QueryServer) {
	s.RegisterService(&_Query_serviceDesc, srv)
}

func _Query_Oracle_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryOracleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).Oracle(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icaoracle.Query/Oracle",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).Oracle(ctx, req.(*QueryOracleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllOracles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllOraclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllOracles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icaoracle.Query/AllOracles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllOracles(ctx, req.(*QueryAllOraclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_ActiveOracles_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryActiveOraclesRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).ActiveOracles(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icaoracle.Query/ActiveOracles",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).ActiveOracles(ctx, req.(*QueryActiveOraclesRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_AllPendingMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryAllPendingMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).AllPendingMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icaoracle.Query/AllPendingMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).AllPendingMetrics(ctx, req.(*QueryAllPendingMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Query_PendingMetrics_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryPendingMetricsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QueryServer).PendingMetrics(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/stride.icaoracle.Query/PendingMetrics",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QueryServer).PendingMetrics(ctx, req.(*QueryPendingMetricsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Query_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stride.icaoracle.Query",
	HandlerType: (*QueryServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Oracle",
			Handler:    _Query_Oracle_Handler,
		},
		{
			MethodName: "AllOracles",
			Handler:    _Query_AllOracles_Handler,
		},
		{
			MethodName: "ActiveOracles",
			Handler:    _Query_ActiveOracles_Handler,
		},
		{
			MethodName: "AllPendingMetrics",
			Handler:    _Query_AllPendingMetrics_Handler,
		},
		{
			MethodName: "PendingMetrics",
			Handler:    _Query_PendingMetrics_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stride/icaoracle/query.proto",
}

func (m *QueryOracleRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.ChainId) > 0 {
		i -= len(m.ChainId)
		copy(dAtA[i:], m.ChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.ChainId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryOracleResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryOracleResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryOracleResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Oracle != nil {
		{
			size, err := m.Oracle.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintQuery(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllOraclesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOraclesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOraclesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllOraclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllOraclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllOraclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Oracles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveOraclesRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveOraclesRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveOraclesRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Active {
		i--
		if m.Active {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *QueryActiveOraclesResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryActiveOraclesResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryActiveOraclesResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Oracles) > 0 {
		for iNdEx := len(m.Oracles) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Oracles[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *QueryAllPendingMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryAllPendingMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryAllPendingMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingMetricsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingMetricsRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingMetricsRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.OracleChainId) > 0 {
		i -= len(m.OracleChainId)
		copy(dAtA[i:], m.OracleChainId)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.OracleChainId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.MetricKey) > 0 {
		i -= len(m.MetricKey)
		copy(dAtA[i:], m.MetricKey)
		i = encodeVarintQuery(dAtA, i, uint64(len(m.MetricKey)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryPendingMetricsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryPendingMetricsResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *QueryPendingMetricsResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for iNdEx := len(m.Metrics) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.Metrics[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintQuery(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func encodeVarintQuery(dAtA []byte, offset int, v uint64) int {
	offset -= sovQuery(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *QueryOracleRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryOracleResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Oracle != nil {
		l = m.Oracle.Size()
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryAllOraclesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllOraclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oracles) > 0 {
		for _, e := range m.Oracles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryActiveOraclesRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Active {
		n += 2
	}
	return n
}

func (m *QueryActiveOraclesResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Oracles) > 0 {
		for _, e := range m.Oracles {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryAllPendingMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *QueryAllPendingMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func (m *QueryPendingMetricsRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.MetricKey)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	l = len(m.OracleChainId)
	if l > 0 {
		n += 1 + l + sovQuery(uint64(l))
	}
	return n
}

func (m *QueryPendingMetricsResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Metrics) > 0 {
		for _, e := range m.Metrics {
			l = e.Size()
			n += 1 + l + sovQuery(uint64(l))
		}
	}
	return n
}

func sovQuery(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozQuery(x uint64) (n int) {
	return sovQuery(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *QueryOracleRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryOracleResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryOracleResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryOracleResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracle", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Oracle == nil {
				m.Oracle = &Oracle{}
			}
			if err := m.Oracle.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOraclesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOraclesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOraclesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllOraclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllOraclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllOraclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, Oracle{})
			if err := m.Oracles[len(m.Oracles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveOraclesRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveOraclesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveOraclesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryActiveOraclesResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryActiveOraclesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryActiveOraclesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Oracles", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Oracles = append(m.Oracles, Oracle{})
			if err := m.Oracles[len(m.Oracles)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryAllPendingMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryAllPendingMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryAllPendingMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, Metric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingMetricsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingMetricsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingMetricsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MetricKey", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MetricKey = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OracleChainId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OracleChainId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryPendingMetricsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryPendingMetricsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryPendingMetricsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthQuery
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthQuery
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metrics = append(m.Metrics, Metric{})
			if err := m.Metrics[len(m.Metrics)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipQuery(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthQuery
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipQuery(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowQuery
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowQuery
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthQuery
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupQuery
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthQuery
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthQuery        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowQuery          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupQuery = fmt.Errorf("proto: unexpected end of group")
)
