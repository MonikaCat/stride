// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: stride/liquidgov/vote.proto

package types

import (
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	v1beta1 "github.com/cosmos/cosmos-sdk/x/gov/types/v1beta1"
	_ "github.com/cosmos/gogoproto/gogoproto"
	proto "github.com/cosmos/gogoproto/proto"
	types "github.com/cosmos/gogoproto/types"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// Vote defines the record of what this user has voted.
type Vote struct {
	// Address of who owns the deposited coins
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	// host_zone_id defines the host zone of the proposal, proposal_id specifies which proposal
	HostZoneId string `protobuf:"bytes,2,opt,name=host_zone_id,json=hostZoneId,proto3" json:"host_zone_id,omitempty"`
	ProposalId uint64 `protobuf:"varint,3,opt,name=proposal_id,json=proposalId,proto3" json:"proposal_id,omitempty"`
	// amount is the amount of tokens used for this vote.
	Amount        github_com_cosmos_cosmos_sdk_types.Int `protobuf:"bytes,4,opt,name=amount,proto3,customtype=github.com/cosmos/cosmos-sdk/types.Int" json:"amount"`
	Option        v1beta1.VoteOption                     `protobuf:"varint,5,opt,name=option,proto3,enum=cosmos.gov.v1beta1.VoteOption" json:"option,omitempty"`
	TimeAvailable *types.Timestamp                       `protobuf:"bytes,6,opt,name=time_available,json=timeAvailable,proto3" json:"time_available,omitempty"`
}

func (m *Vote) Reset()         { *m = Vote{} }
func (m *Vote) String() string { return proto.CompactTextString(m) }
func (*Vote) ProtoMessage()    {}
func (*Vote) Descriptor() ([]byte, []int) {
	return fileDescriptor_b990aae4d11a3d92, []int{0}
}
func (m *Vote) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Vote) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Vote.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Vote) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Vote.Merge(m, src)
}
func (m *Vote) XXX_Size() int {
	return m.Size()
}
func (m *Vote) XXX_DiscardUnknown() {
	xxx_messageInfo_Vote.DiscardUnknown(m)
}

var xxx_messageInfo_Vote proto.InternalMessageInfo

func (m *Vote) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *Vote) GetHostZoneId() string {
	if m != nil {
		return m.HostZoneId
	}
	return ""
}

func (m *Vote) GetProposalId() uint64 {
	if m != nil {
		return m.ProposalId
	}
	return 0
}

func (m *Vote) GetOption() v1beta1.VoteOption {
	if m != nil {
		return m.Option
	}
	return v1beta1.OptionEmpty
}

func (m *Vote) GetTimeAvailable() *types.Timestamp {
	if m != nil {
		return m.TimeAvailable
	}
	return nil
}

func init() {
	proto.RegisterType((*Vote)(nil), "stride.liquidgov.Vote")
}

func init() { proto.RegisterFile("stride/liquidgov/vote.proto", fileDescriptor_b990aae4d11a3d92) }

var fileDescriptor_b990aae4d11a3d92 = []byte{
	// 405 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x4c, 0x52, 0xc1, 0x8a, 0xd4, 0x40,
	0x10, 0x4d, 0xaf, 0x63, 0xc4, 0x5e, 0x5d, 0x24, 0xec, 0x21, 0x8e, 0x92, 0x04, 0x0f, 0x92, 0xcb,
	0x74, 0x3b, 0xb3, 0xe0, 0x7d, 0xf6, 0x20, 0x0c, 0x28, 0x42, 0x56, 0x3c, 0xec, 0x25, 0x74, 0xa6,
	0xdb, 0x6c, 0x63, 0x92, 0x8a, 0xe9, 0x4e, 0x50, 0xbf, 0xc2, 0x8f, 0xf1, 0x03, 0x3c, 0xee, 0x71,
	0xf1, 0x24, 0x1e, 0x16, 0x99, 0xf9, 0x11, 0xe9, 0x4e, 0x67, 0x99, 0x53, 0xaa, 0xea, 0xbd, 0x97,
	0xca, 0x7b, 0x29, 0xfc, 0x4c, 0xe9, 0x4e, 0x72, 0x41, 0x2b, 0xf9, 0xa5, 0x97, 0xbc, 0x84, 0x81,
	0x0e, 0xa0, 0x05, 0x69, 0x3b, 0xd0, 0x10, 0x3c, 0x19, 0x41, 0x72, 0x07, 0xce, 0x9f, 0x6f, 0x41,
	0xd5, 0xa0, 0xa8, 0x25, 0x2e, 0x0b, 0xa1, 0xd9, 0xd2, 0xd4, 0x23, 0x7f, 0x7e, 0x5a, 0x42, 0x09,
	0xb6, 0xa4, 0xa6, 0x72, 0xd3, 0xa7, 0xa3, 0x26, 0x1f, 0x81, 0xb1, 0x71, 0x50, 0x5c, 0x02, 0x94,
	0x95, 0xa0, 0xb6, 0x2b, 0xfa, 0x4f, 0x54, 0xcb, 0x5a, 0x28, 0xcd, 0xea, 0x76, 0x24, 0xbc, 0xf8,
	0x75, 0x84, 0x67, 0x1f, 0x41, 0x8b, 0x60, 0x85, 0x1f, 0x6c, 0x3b, 0xc1, 0x34, 0x74, 0x21, 0x4a,
	0x50, 0xfa, 0xf0, 0x3c, 0xfc, 0xfd, 0x73, 0x71, 0xea, 0x5e, 0xb6, 0xe6, 0xbc, 0x13, 0x4a, 0x5d,
	0xe8, 0x4e, 0x36, 0x65, 0x36, 0x11, 0x83, 0x04, 0x3f, 0xba, 0x02, 0xa5, 0xf3, 0xef, 0xd0, 0x88,
	0x5c, 0xf2, 0xf0, 0xc8, 0x08, 0x33, 0x6c, 0x66, 0x97, 0xd0, 0x88, 0x0d, 0x0f, 0x62, 0x7c, 0xdc,
	0x76, 0xd0, 0x82, 0x62, 0x95, 0x21, 0xdc, 0x4b, 0x50, 0x3a, 0xcb, 0xf0, 0x34, 0xda, 0xf0, 0xe0,
	0x0d, 0xf6, 0x59, 0x0d, 0x7d, 0xa3, 0xc3, 0x99, 0xdd, 0x4a, 0xae, 0x6f, 0x63, 0xef, 0xef, 0x6d,
	0xfc, 0xb2, 0x94, 0xfa, 0xaa, 0x2f, 0xc8, 0x16, 0x6a, 0xe7, 0xc8, 0x3d, 0x16, 0x8a, 0x7f, 0xa6,
	0xfa, 0x5b, 0x2b, 0x14, 0xd9, 0x34, 0x3a, 0x73, 0xea, 0xe0, 0x35, 0xf6, 0xa1, 0xd5, 0x12, 0x9a,
	0xf0, 0x7e, 0x82, 0xd2, 0x93, 0x55, 0x44, 0xdc, 0xa7, 0x9b, 0xf0, 0x5c, 0x90, 0xc4, 0x18, 0x7d,
	0x6f, 0x59, 0x99, 0x63, 0x07, 0x6b, 0x7c, 0x62, 0x22, 0xc9, 0xd9, 0xc0, 0x64, 0xc5, 0x8a, 0x4a,
	0x84, 0x7e, 0x82, 0xd2, 0xe3, 0xd5, 0x9c, 0x8c, 0xc9, 0x91, 0x29, 0x39, 0xf2, 0x61, 0x4a, 0x2e,
	0x7b, 0x6c, 0x14, 0xeb, 0x49, 0x70, 0xfe, 0xee, 0x7a, 0x17, 0xa1, 0x9b, 0x5d, 0x84, 0xfe, 0xed,
	0x22, 0xf4, 0x63, 0x1f, 0x79, 0x37, 0xfb, 0xc8, 0xfb, 0xb3, 0x8f, 0xbc, 0xcb, 0xb3, 0x03, 0x13,
	0x17, 0xf6, 0x4f, 0x2f, 0xde, 0xb2, 0x42, 0x51, 0x77, 0x12, 0xc3, 0xf2, 0x15, 0xfd, 0x7a, 0x70,
	0x18, 0xd6, 0x55, 0xe1, 0xdb, 0x8d, 0x67, 0xff, 0x03, 0x00, 0x00, 0xff, 0xff, 0x73, 0xf2, 0xf0,
	0xa2, 0x39, 0x02, 0x00, 0x00,
}

func (m *Vote) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Vote) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Vote) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.TimeAvailable != nil {
		{
			size, err := m.TimeAvailable.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintVote(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Option != 0 {
		i = encodeVarintVote(dAtA, i, uint64(m.Option))
		i--
		dAtA[i] = 0x28
	}
	{
		size := m.Amount.Size()
		i -= size
		if _, err := m.Amount.MarshalTo(dAtA[i:]); err != nil {
			return 0, err
		}
		i = encodeVarintVote(dAtA, i, uint64(size))
	}
	i--
	dAtA[i] = 0x22
	if m.ProposalId != 0 {
		i = encodeVarintVote(dAtA, i, uint64(m.ProposalId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.HostZoneId) > 0 {
		i -= len(m.HostZoneId)
		copy(dAtA[i:], m.HostZoneId)
		i = encodeVarintVote(dAtA, i, uint64(len(m.HostZoneId)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintVote(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintVote(dAtA []byte, offset int, v uint64) int {
	offset -= sovVote(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Vote) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	l = len(m.HostZoneId)
	if l > 0 {
		n += 1 + l + sovVote(uint64(l))
	}
	if m.ProposalId != 0 {
		n += 1 + sovVote(uint64(m.ProposalId))
	}
	l = m.Amount.Size()
	n += 1 + l + sovVote(uint64(l))
	if m.Option != 0 {
		n += 1 + sovVote(uint64(m.Option))
	}
	if m.TimeAvailable != nil {
		l = m.TimeAvailable.Size()
		n += 1 + l + sovVote(uint64(l))
	}
	return n
}

func sovVote(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozVote(x uint64) (n int) {
	return sovVote(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Vote) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowVote
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Vote: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Vote: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HostZoneId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HostZoneId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProposalId", wireType)
			}
			m.ProposalId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ProposalId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Option", wireType)
			}
			m.Option = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Option |= v1beta1.VoteOption(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeAvailable", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowVote
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthVote
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthVote
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TimeAvailable == nil {
				m.TimeAvailable = &types.Timestamp{}
			}
			if err := m.TimeAvailable.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipVote(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthVote
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipVote(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowVote
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowVote
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthVote
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupVote
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthVote
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthVote        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowVote          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupVote = fmt.Errorf("proto: unexpected end of group")
)
