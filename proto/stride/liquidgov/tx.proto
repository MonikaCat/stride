syntax = "proto3";
package stride.liquidgov;

import "cosmos/gov/v1beta1/gov.proto";
import "gogoproto/gogo.proto";
import "cosmos_proto/cosmos.proto";
import "cosmos/msg/v1/msg.proto";

option go_package = "github.com/Stride-Labs/stride/v11/x/liquidgov/types";

// Msg defines the Msg service.
service Msg { 
  rpc UpdateProposal(MsgUpdateProposal) returns (MsgUpdateProposalResponse);
  rpc DepositVotingStake(MsgDepositVotingStake) returns (MsgDepositVotingStakeResponse);
  rpc WithdrawVotingStake(MsgWithdrawVotingStake) returns (MsgWithdrawVotingStakeResponse);        
}

message MsgUpdateProposal {
  option (cosmos.msg.v1.signer) = "creator";

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string host_zone_id = 2;
  uint64 proposal_id = 3;
}

message MsgUpdateProposalResponse {}


message MsgDepositVotingStake {
  option (cosmos.msg.v1.signer) = "creator";
  option (gogoproto.equal) = false;

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string st_denom = 2;
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgDepositVotingStakeResponse {}


message MsgWithdrawVotingStake {
  option (cosmos.msg.v1.signer) = "creator";
  option (gogoproto.equal) = false;

  string creator = 1 [(cosmos_proto.scalar) = "cosmos.AddressString"];
  string st_denom = 2;
  string amount = 3 [
    (gogoproto.customtype) = "github.com/cosmos/cosmos-sdk/types.Int",
    (gogoproto.nullable) = false
  ];
}

message MsgWithdrawVotingStakeResponse {}
